import asyncio
import logging
from io import StringIO

from pyrogram.client import Client
from pyrogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
)
from yt_dlp import YoutubeDL

from app.logger import YtdlpLogger
from app.queries import get_user_by_id
from app.security import whitelisted
from app.tasks import (
    HandleUrlTaskData,
    handle_url_task,
    register_user_task,
    toggle_is_audio_only_task,
)
from app.validators import validate_url

logger = logging.getLogger(__name__)


async def start_handler(client: Client, message: Message) -> None:
    await client.delete_messages(message.chat.id, message.id)

    if not await get_user_by_id(message.from_user.id):
        await register_user_task(message.from_user.id)
        await message.reply("–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @evilyach –∑–∞ –¥–æ—Å—Ç—É–ø–æ–º –∫ –±–æ—Ç—É.")

    buttons = [
        InlineKeyboardButton(text="–°–∫–∞—á–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ?", callback_data="toggle_is_audio_only_callback_handler"),
    ]

    keyboard = InlineKeyboardMarkup([buttons])

    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ª—é–±–æ–µ –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Å–∫–∞—á–∞—Ç—å.",
        reply_markup=keyboard,
    )


async def help_handler(client: Client, message: Message) -> None:
    await client.delete_messages(message.chat.id, message.id)

    msg = (
        "<b>–°–∫–∞—á–∞—Ç–µ–ª—å –û–Ω–ª–∞–π–Ω.</b>\n"
        "\n"
        "–ë–æ—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞.\n"
        "\n"
        "–î–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ, –∏ –≤ –æ—Ç–≤–µ—Ç –í—ã –ø–æ–ª—É—á–∏—Ç–µ "
        "–≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä—è–º–æ –≤ Telegram.\n"
        "\n"
        "–ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–∫–∞—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ, –±–µ–∑ –≤–∏–¥–µ–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–µ—Å–Ω—é –∏–ª–∏ –ø–æ–¥–∫–∞—Å—Ç), –º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å "
        "—Ä–µ–∂–∏–º –∫–Ω–æ–ø–∫–æ–π –≤ –º–µ–Ω—é '/start' –∏–ª–∏ –∫–æ–º–∞–Ω–¥–æ–π '/audio_only'.\n"
        "\n"
        "–ë–æ—Ç —É–º–µ–µ—Ç —Å–∫–∞—á–∏–≤–∞—Ç—å –≤–∏–¥–µ–æ –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:\n"
        "- YouTube.\n"
        "- YouTube Shorts.\n"
        "- RuTube.\n"
        "- TikTok.\n"
        "- Twitch VODs.\n"
        "- Twitch Clips.\n"
        "- –û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏.\n"
        "- VK Video.\n"
        "- VK –ö–ª–∏–ø—ã.\n"
        "- –î–≤–∞—á.\n"
        "- 4chan.\n"
        "- DailyMotion.\n"
        "\n"
        "–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º –∏–∑:\n"
        "- Instagram Reels.\n"
        "- RuTube Shorts.\n"
        "\n"
        "–ë–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞. –ß—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ –Ω–µ–≥–æ, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å "
        "–∫ –∞–¥–º–∏–Ω—É (@evilyach).\n"
    )

    await message.reply(msg)


@whitelisted
async def download_handler(client: Client, message: Message) -> None:
    urls = []

    for url in StringIO(message.text).readlines():
        if not validate_url(url):
            logger.info(f"Tried to download link '{url}', which is not a valid URL.")
            continue

        urls.append(url.strip())

    if not urls:
        logger.info(f"User {message.from_user.id} tried to provide invalid links only.")
        await message.reply("–ü–æ—Ö–æ–∂–µ, –í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

        return

    user = await get_user_by_id(message.from_user.id)
    if not user:
        logger.error(f"Couldn't get user with id = '{message.from_user.id}'")

        return

    logger.info(user)

    if user.is_audio_only:
        format = "ba/best"
        ext = "mp3"
    else:
        format = "mp4[filesize<2G]/best"
        ext = "mp4"

    opts = {
        "format": format,
        "logger": YtdlpLogger(),
        "merge_output_format": ext,
        "outtmpl": "./output/%(id)s.%(ext)s",
        "postprocessors": [
            {
                "key": "FFmpegVideoConvertor",
                "preferedformat": ext,
            }
        ],
        "writethumbnail": True,
    }

    logger.info(opts)

    start_message = await client.send_message(message.chat.id, "–ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ...")

    with YoutubeDL(opts) as ydl:
        # Get the tasks for downloading the videos
        tasks = [
            handle_url_task(
                HandleUrlTaskData(
                    url=url,
                    client=client,
                    message=message,
                    user=user,
                    chat_id=message.chat.id,
                    ydl=ydl,
                )
            )
            for url in urls
        ]

        # Run the tasks
        for task in asyncio.as_completed(tasks):
            try:
                await task
            except Exception:
                await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ –ø–æ —Å—Å—ã–ª–∫–µ. üò¢")
                logger.warning("Error occurred while executing the task.")

                raise
            finally:
                await client.delete_messages(message.chat.id, start_message.id)
                await client.delete_messages(message.chat.id, message.id)


async def toggle_is_audio_only_handler(client: Client, message: Message) -> None:
    try:
        msg = await toggle_is_audio_only_task(message.from_user.id)
    except ValueError:
        await client.send_message(message.chat.id, "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. üò¢")
        return

    await client.send_message(message.chat.id, msg)


async def toggle_is_audio_only_callback_handler(client: Client, callback_query: CallbackQuery) -> None:
    try:
        msg = await toggle_is_audio_only_task(callback_query.from_user.id)
    except ValueError:
        await client.send_message(callback_query.message.chat.id, "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. üò¢")
        return

    await client.send_message(callback_query.message.chat.id, msg)
